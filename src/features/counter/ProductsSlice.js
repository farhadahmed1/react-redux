import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';


const initialState = {
  items: [],
  status: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const productsFetch = createAsyncThunk(
  'products/productsFetch',
  async () => {
    const response = await fetch('https://fakestoreapi.com/products')
      .then(res => res.json())
    return response?.data
  }

);


export const ProductsSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(productsFetch.pending, (state) => {
      state.status = 'pending';

    })
      .addCase(productsFetch.fulfilled, (state, action) => {
        state.status = 'success';
        state.items += action.payload;
      })
      .addCase(productsFetch.rejected, (state) => {
        state.status = 'rejected';

      })


  },
});



export default ProductsSlice.reducer;
